
wtf is rect2.Layer::setBounds(&globalData.appUI.frameBounds);rect and layer are both sub class of view;but method is not overriden in rec

check if depth ,alpha,etc testing in opengl disabled
getPhoto() method get as newImage copy
DISPLAY PARAMS OF BOUND SHould be set before using anything from UI.h


//programming
inheritance -public , private ,protected, virtual(only single copy of base clse for multiple base class inheritance)
compile time polymorphysm is just functions with diff signature
//runtime polymorphics is achevied through below
//virtual functions and polymorphysm calling derived class throung base class pointer(difference accesing via pointer)
When accessed "normally," virtual functions behave just like any other type of class member function. However, what makes virtual functions
 important and capable of supporting run-time polymorphism is how they behave when accessed via a pointer.
virtual functions must be non static memebers of clase,They cannot be friends. Finally, constructor functions cannot be virtual, but destructor functions can
a virtual function was called through a base-class pointer, but the polymorphic nature of a virtual function is also
available when called through a base-class reference(&) which is implicit pointer).

//Because inheritance is hierarchical in C++, it makes sense that virtual functions are also hierarchical. This means that when a derived class fails to override a virtual function, the first redefinition found in reverse order of derivation is used
Keep in mind that when a virtual function is declared as pure, all derived classes must override it. If a derived class fails to do this, a compile-time error will result.
//show() is a pure virtual function
  virtual void show() = 0;
//Abstract classes
A class that contains at least one pure virtual function is said to be abstract.
Although you cannot create objects of an abstract class, you can create pointers and references to an abstract class.
Template:
code wriiten by compiler(creates a specilization of function)//if the template funation is not used it is not compiled
Even though a generic function overloads itself as needed, you can explicitly overload one, too. This is formally called explicit specialization
// Use new-style specialization syntax for explicit specialization(Overloading). template<> void swapargs<int>(int &a, int &b) {
compiler generates instances of the functions

Overloading a Function Template(not just function templlates can be overloaded)
// First version of f() template.
template <class X> void f(X a)
{
cout << "Inside f(X a)\n";
}
// Second version of f() template.
template <class X, class Y> void f(X a, Y b)
{
cout << "Inside f(X a, Y b)\n";
}
}

 When functions are overloaded, you may have different actions performed
within the body of each function. But a generic function must perform the same general
action for all versionsâ€”only the type of data can differ
ERRORs
//calling constructor from other constructor(CONSTRUCTOR DELEGATION) of same classs members lose values
///Override keyword
//Super keyworkd


